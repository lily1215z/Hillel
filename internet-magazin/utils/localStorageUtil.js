"use strict";

class LocalStorageUtil {
    //мы видели то что у элементов есть ключ products. Мы будим его использовать несколько раз
    //поэтому лучше вынести в отдельное свойство. В классе св-во задается в конструкторе
    constructor() {
        this.keyName = "products";
    }

    //метод, кот позволит получить все т-ры, кот находятся в LocalStorage
    getProducts() {
        //получать будит по ключу products, поэтому используем this.keyName
        const productsLocalStorage = localStorage.getItem(this.keyName);
        
        //если есть какое-то значение в хранилище то вернется строка иначе вернется null
        //поэтому делается проверка, что если не null, то будим с этим работать
        if(productsLocalStorage !== null) {
            //если не равно null, то нужно распарсить строку кот вернется и перевести ее в массив
            return JSON.parse(productsLocalStorage);
        }
        //иначе просто вернется пустой массив
        return [];
    }
    //метод для того чтоб добавить новое значение в LocalStorage. Соответственно если мы 
    //добавляем значение мы передаем в этот метод id этого т-ра, кот хотим добавить, поэтому этот
    //метод будит принимать id
    putProducts(id) {
        //первое, нужно посмотреть что было в хранилище и добавить новый id. Для того чтоб посмотреть что
        //есть в хранилище поможет getProducts().
        //теперь в  products находится все что находится в хранилище
        let products = this.getProducts();

        //в компоненте Каталог мы должны понимать т-р добавлен в корзину либо он удален для того чтоб подсветить наши кнопочки
        //нужно что метод putProducts возвращал нам что это новый т-р или удаленный 
        //по умолчанию false. Если значение false то мы этот т-р удалили. Если true то мы его добавили
        let pushProduct = false;

        //делаем проверку для того что если в хранилище уже есть id=010 то если повторный пролетит его не запоминать
        //через indexOf определяем, чт оесли у нас есть совпадение с id кот мы передали и если не найдено то вернется -1
        const index = products.indexOf(id);
        //если -1 значит это новые данные и нам нужно их записать
        if(index === -1) {
        //products - это массив поэтому можем запушить новый id
            products.push(id);
            pushProduct = true;
        } else {
            //splice удаляет один элемент. Позицию эл мы знаем - это index и мы удаляем 1 элемент
            products.splice(index, 1);
        }
        //после всего этого нужно установить в хранилище. Указываем ключ куда хотим установить
        //и 2м аргументом мы указываем что мы хотим установить, но мы не можем просто указать 
        //products т.к. это массив, а хранилище принимает только строчку и поэтому делаем обратное 
        //преобразование
        localStorage.setItem(this.keyName, JSON.stringify(products));

        //по итогу нужно вернуть 2 значение, это pushProduct и сам массив products. Лучше всего
        //это сделать в виде обьекта, поэтому нужно вернуть обьект
        return { pushProduct, products }
            //если у обьекта ключ и значение совпадают, то можно это сократить
            // pushProduct: pushProduct,
            // products: products
            
    }
}

const localStorageUtil = new LocalStorageUtil();
//мы завершили написание класса по работе с хранилищем , теперь мы можем обращаться к нему 
//localStorageUtil.getProducts() или localStorageUtil.getProducts()

